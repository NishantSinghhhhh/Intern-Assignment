import { createSlice } from '@reduxjs/toolkit';

// Define the cart slice
const cartSlice = createSlice({
  name: 'cart', // Slice name
  initialState: {
    items: [], // Initial state with an empty items array
  },
  reducers: {
    // Action to add an item to the cart
    add: (state, action) => {
      // Check if the item already exists in the cart
      const existingItem = state.items.find(item => item.id === action.payload.id);
      if (existingItem) {
        // If it exists, increase the quantity
        existingItem.quantity += 1;
      } else {
        // Otherwise, add the item with a quantity of 1
        state.items.push({ ...action.payload, quantity: 1 });
      }
    },
    // Action to remove an item from the cart
    remove: (state, action) => {
      // Filter out the item with the given id
      state.items = state.items.filter(item => item.id !== action.payload);
    },
    // Action to increase the quantity of an item
    addQuantity: (state, action) => {
      // Find the item in the cart
      const item = state.items.find(item => item.id === action.payload);
      if (item) item.quantity += 1; // Increase the quantity if the item is found
    },
    // Action to decrease the quantity of an item
    decreaseQuantity: (state, action) => {
      // Find the item in the cart
      const item = state.items.find(item => item.id === action.payload);
      if (item) item.quantity = Math.max(1, item.quantity - 1); // Decrease the quantity but ensure it does not go below 1
    },
  },
});

// Export the actions generated by the slice
export const { add, remove, addQuantity, decreaseQuantity } = cartSlice.actions;

// Selector to get all cart items from the state
export const selectCartItems = state => state.cart.items;

// Selector to get the total count of items in the cart
export const selectCartItemCount = state => 
  state.cart.items.reduce((total, item) => total + item.quantity, 0);

// Export the reducer function for the cart slice
export default cartSlice.reducer;
